import React from 'react';
import axios from 'axios';
import 
  Twilio, 
  { connect, createLocalTracks, createLocalVideoTrack } 
from 'twilio-video';

export interface VideoProps {
  username: string,
  activeRoom: string,
  loading: boolean
}
 
export interface VideoState {
  token: any,
  identity: any,
  localMediaAvailable: boolean
  hasJoinedRoom: boolean
}
 
class Video extends React.Component<VideoProps, VideoState> {
  state = {
    data: {},
    // localTrack: false,
    // remoteTrack: null,

    token: '',
    identity: null,  /* Will hold the fake name assigned to the client. The name is generated by faker on the server */
    roomName: '',    /* Will store the room name */
    roomNameErr: false,  /* Track error for room name TextField. This will    enable us to show an error message when this variable is true */
    previewTracks: null,
    localMediaAvailable: false, /* Represents the availability of a LocalAudioTrack(microphone) and a LocalVideoTrack(camera) */
    hasJoinedRoom: false,
    activeRoom: null // Track the current active room
  }

  componentDidMount() {
    const { username } = this.props;

    axios.get(`http://localhost:8000/token?identity=${username}`)
      .then(results => {
        const { identity, token } = results.data;
        console.log((results as any).data);
        this.setState({ identity, token })
      });
  }

  componentDidUpdate(prevProps: any, prevState: any) {

    if (prevProps.activeRoom !== this.props.activeRoom) {
      this.joinRoom(this.props.activeRoom);
    }
  }

  joinRoom = (room: string) => {
    console.log('room changed!');
    let connectOptions: any = {
      name: room
    }

    if (this.state.previewTracks) {
      connectOptions.tracks = this.state.previewTracks;
    }

    connect(this.state.token, connectOptions)
      .then(this.onRoomJoined, (error: any) => {
        console.error('Count not connect to Twilio', error.message)
      });
  }

  onRoomJoined = (room: any) => {
    // Called when a participant joins a room
    console.log("Joined as '" + this.state.identity + "'");
    this.setState({
      localMediaAvailable: true,
      hasJoinedRoom: true  // Removes ‘Join Room’ button and shows ‘Leave Room’
    });

    // Attach LocalParticipant's tracks to the DOM, if not already attached.
    const previewContainer: any = this.refs.localMedia;
    if (!previewContainer.querySelector('video')) {
      this.attachParticipantTracks(room.localParticipant, previewContainer);
    }
  }

  // Attach the Participant's Tracks to the DOM.
  attachParticipantTracks(participant: any, container: any) {
    var tracks = Array.from(participant.tracks.values());
    this.attachTracks(tracks, container);
  }

  attachTracks(tracks: any, container: any) {
    tracks.forEach((track: any) => {
      container.appendChild(track.attach());
    });
  }

  renderLocalTrack = () => {
    if (this.state.localMediaAvailable) {
      return <div ref="localMedia" id="localTrack" />;
    }

    return null;
  }

  render() {
    const {
      data,
      previewTracks,
      identity,
      roomName,
    } = this.state;
    const { loading, activeRoom } = this.props;

    return (
      <div className="col-md-6 box">
        <div className="roomTitle">
          {loading && (
            <span> Loading... {activeRoom}</span>
          )}

          {!loading && activeRoom && (
            <span> Connected to {activeRoom}</span>
          )}
          
          {!loading && !activeRoom && (
            <span>Select a room to get started</span>
          )}
        </div>

        <div className="row remote_video_container">
          <div ref="remoteMedia" id="remoteTrack"></div>
        </div>
        <div className="spacing"></div>
        <div className="row">
          { this.renderLocalTrack() }
        </div>
      </div>
    );
  }
}
 
export default Video;